<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Máy Tính Giải Thích - Nâng Cao</title>
    <!-- Import phông chữ Lobster -->
    <link
      href="https://fonts.googleapis.com/css2?family=Lobster&display=swap"
      rel="stylesheet"
    />
    <style>
      /* Reset cơ bản */
      * {
        box-sizing: border-box;
      }
      body {
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #ece9e6, #ffffff);
        font-family: "Lobster", cursive;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background-attachment: fixed;
      }
      .container {
        background: rgba(255, 255, 255, 0.85);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        max-width: 600px;
        width: 90%;
        animation: fadeIn 1.5s ease-out;
      }
      h1 {
        text-align: center;
        font-size: 3rem;
        margin-bottom: 30px;
        color: #5a5a5a;
      }
      /* Vùng nhập liệu dùng contenteditable */
      .expression-input {
        width: 100%;
        min-height: 60px;
        padding: 20px;
        font-size: 2rem;
        text-align: right;
        margin-bottom: 30px;
        border: none;
        border-radius: 10px;
        background: rgba(255, 255, 255, 0.7);
        box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
        outline: none;
      }
      .keyboard {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 15px;
        margin-bottom: 15px;
      }
      .key {
        padding: 20px;
        font-size: 1.8rem;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: transform 0.2s, box-shadow 0.2s;
        background: linear-gradient(145deg, #e0e0e0, #ffffff);
        box-shadow: 5px 5px 10px #bebebe, -5px -5px 10px #ffffff;
        user-select: none;
      }
      .key:hover {
        transform: scale(1.05);
        box-shadow: 2px 2px 5px #bebebe, -2px -2px 5px #ffffff;
      }
      /* Các phím đặc biệt */
      .key.operator {
        background: linear-gradient(145deg, #d1c4e9, #b39ddb);
        color: #3e2723;
        font-weight: bold;
      }
      .key.clear {
        background: linear-gradient(145deg, #ffcdd2, #ef9a9a);
        color: #b71c1c;
        font-weight: bold;
      }
      /* Phím thoát số mũ */
      .key.exit {
        background: linear-gradient(145deg, #c8e6c9, #a5d6a7);
        color: #1b5e20;
        font-weight: bold;
      }
      .btn {
        width: 100%;
        padding: 20px;
        font-size: 2rem;
        font-family: "Lobster", cursive;
        background: linear-gradient(135deg, #ff8a65, #ff7043);
        color: white;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: background 0.3s, box-shadow 0.3s;
        margin-bottom: 30px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }
      .btn:hover {
        background: linear-gradient(135deg, #ff7043, #ff8a65);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
      }
      .result {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 20px;
        text-align: center;
        color: #424242;
      }
      .explanation {
        background: rgba(255, 255, 255, 0.85);
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        font-size: 1.6rem;
        line-height: 1.6;
        color: #555;
      }
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      @media (max-width: 600px) {
        h1 {
          font-size: 2.5rem;
        }
        .expression-input {
          font-size: 1.8rem;
        }
        .key {
          font-size: 1.5rem;
          padding: 15px;
        }
        .btn {
          font-size: 1.8rem;
          padding: 15px;
        }
        .result {
          font-size: 1.8rem;
        }
        .explanation {
          font-size: 1.4rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Máy Tính Giải Thích</h1>
      <!-- Vùng nhập liệu dùng contenteditable -->
      <div
        id="expression"
        class="expression-input"
        contenteditable="true"
      ></div>

      <!-- Bàn phím ảo -->
      <div class="keyboard" id="keyboard">
        <!-- Hàng 1 -->
        <div class="key" data-value="7">7</div>
        <div class="key" data-value="8">8</div>
        <div class="key" data-value="9">9</div>
        <div class="key operator" data-value="÷">÷</div>
        <!-- Hàng 2 -->
        <div class="key" data-value="4">4</div>
        <div class="key" data-value="5">5</div>
        <div class="key" data-value="6">6</div>
        <div class="key operator" data-value="x">x</div>
        <!-- Hàng 3 -->
        <div class="key" data-value="1">1</div>
        <div class="key" data-value="2">2</div>
        <div class="key" data-value="3">3</div>
        <div class="key operator" data-value="-">–</div>
        <!-- Hàng 4 -->
        <div class="key" data-value="0">0</div>
        <div class="key" data-value=".">.</div>
        <div class="key" data-value="(">(</div>
        <div class="key" data-value=")">)</div>
        <!-- Hàng 5 -->
        <div class="key operator" data-value="√">√</div>
        <div class="key operator" data-value="power">x<sup>n</sup></div>
        <div class="key operator" data-value="+">+</div>
        <div class="key clear" data-value="clear">C</div>
        <!-- Hàng 6: Phím thoát số mũ -->
        <div class="key exit" data-value="exitSup" style="grid-column: span 4">
          ↘ Thoát số mũ
        </div>
      </div>

      <button class="btn" id="calculateBtn">Tính Toán</button>
      <div class="result">Kết quả: <span id="result"></span></div>
      <div class="explanation">
        <strong>Giải thích:</strong>
        <div id="explanation"></div>
      </div>
    </div>

    <script>
      // Lưu vị trí con trỏ (range) trong vùng contenteditable
      let savedRange = null;
      const expressionDiv = document.getElementById("expression");

      // Cập nhật vị trí con trỏ khi có sự thay đổi
      function saveSelection() {
        const sel = window.getSelection();
        if (sel.rangeCount > 0) {
          savedRange = sel.getRangeAt(0);
        }
      }
      expressionDiv.addEventListener("mouseup", saveSelection);
      expressionDiv.addEventListener("keyup", saveSelection);
      expressionDiv.addEventListener("focus", saveSelection);

      // Hàm chèn một phần tử (element) vào vị trí con trỏ
      function insertAtCursorElement(element) {
        const sel = window.getSelection();
        let range;
        if (sel.rangeCount > 0) {
          range = sel.getRangeAt(0);
        } else if (savedRange) {
          range = savedRange;
        } else {
          range = document.createRange();
          range.selectNodeContents(expressionDiv);
          range.collapse(false);
        }
        range.deleteContents();
        range.insertNode(element);
        // Nếu element có nội dung, đặt con trỏ bên trong; nếu không, đặt sau element
        if (element.childNodes.length > 0) {
          range.selectNodeContents(element);
          range.collapse(false);
        } else {
          range.setStartAfter(element);
          range.collapse(true);
        }
        sel.removeAllRanges();
        sel.addRange(range);
        savedRange = range;
      }

      // Hàm chèn HTML (chuỗi) tại vị trí con trỏ
      function insertAtCursor(html) {
        const sel = window.getSelection();
        let range;
        if (sel.rangeCount > 0) {
          range = sel.getRangeAt(0);
        } else if (savedRange) {
          range = savedRange;
        } else {
          range = document.createRange();
          range.selectNodeContents(expressionDiv);
          range.collapse(false);
        }
        range.deleteContents();
        const el = document.createElement("div");
        el.innerHTML = html;
        const frag = document.createDocumentFragment();
        let node, lastNode;
        while ((node = el.firstChild)) {
          lastNode = frag.appendChild(node);
        }
        range.insertNode(frag);
        if (lastNode) {
          range.setStartAfter(lastNode);
          range.collapse(true);
          sel.removeAllRanges();
          sel.addRange(range);
        }
        savedRange = range;
      }

      // Hàm di chuyển con trỏ ra ngoài thẻ <sup> nếu đang bên trong
      function exitSuperscript() {
        const sel = window.getSelection();
        if (sel.rangeCount === 0) return;
        let range = sel.getRangeAt(0);
        let node = range.startContainer;
        while (node && node !== expressionDiv) {
          if (node.nodeName.toLowerCase() === "sup") {
            let newRange = document.createRange();
            newRange.setStartAfter(node);
            newRange.collapse(true);
            sel.removeAllRanges();
            sel.addRange(newRange);
            savedRange = newRange;
            break;
          }
          node = node.parentNode;
        }
      }

      // Ngăn mất focus của vùng contenteditable khi nhấn phím ảo
      const keys = document.querySelectorAll(".key");
      keys.forEach((key) => {
        key.addEventListener("mousedown", (e) => {
          e.preventDefault();
        });
      });

      // Xử lý sự kiện cho các phím ảo
      keys.forEach((key) => {
        key.addEventListener("click", () => {
          const value = key.getAttribute("data-value");
          if (value === "clear") {
            expressionDiv.innerHTML = "";
            savedRange = null;
          } else if (value === "power") {
            // Chèn thẻ <sup> với ký tự zero-width space và đặt con trỏ bên trong
            const supEl = document.createElement("sup");
            supEl.innerHTML = "&#8203;"; // zero-width space
            insertAtCursorElement(supEl);
          } else if (value === "exitSup") {
            exitSuperscript();
          } else {
            insertAtCursor(value);
          }
          expressionDiv.focus();
        });
      });

      // Hàm lấy nội dung dạng văn bản từ contenteditable,
      // chuyển <sup>...</sup> thành ký hiệu '^' (nếu không rỗng) để tính toán
      function getExpressionPlainText() {
        let html = expressionDiv.innerHTML;
        let text = html.replace(/<sup>(.*?)<\/sup>/g, function (match, p1) {
          // Loại bỏ zero-width space và khoảng trắng
          let cleaned = p1.replace(/\u200B|&#8203;/g, "").trim();
          return cleaned ? "^" + cleaned : "";
        });
        text = text.replace(/<[^>]*>/g, "");
        return text;
      }

      // Hàm tính toán:
      // - Chuyển "x" thành "*" (nhân), "÷" thành "/" (chia)
      // - Chuyển "^" thành "**" (lũy thừa)
      // - Chuyển "√(" thành "Math.sqrt(" nếu cần
      function calculate() {
        let expression = getExpressionPlainText();
        expression = expression
          .replace(/x/g, "*")
          .replace(/÷/g, "/")
          .replace(/\^/g, "**")
          .replace(/√\(/g, "Math.sqrt(");
        try {
          const result = eval(expression);
          document.getElementById("result").innerText = result;
          document.getElementById("explanation").innerHTML =
            generateDetailedExplanation(getExpressionPlainText(), result);
        } catch (error) {
          document.getElementById("result").innerText = "Lỗi!";
          document.getElementById("explanation").innerText =
            "Có lỗi trong quá trình tính toán. Vui lòng kiểm tra lại biểu thức.";
        }
      }

      document
        .getElementById("calculateBtn")
        .addEventListener("click", calculate);

      // Hàm giải thích đơn giản
      function generateDetailedExplanation(expr, result) {
        const formattedExpr = expr
          .replace(/\*/g, "×")
          .replace(/\//g, "÷")
          .replace(/\^/g, "<sup>");
        return `Biểu thức "${formattedExpr}" được tính và kết quả là ${result}.`;
      }
    </script>
  </body>
</html>
